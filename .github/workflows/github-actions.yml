name: Kotlin build CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: delivery-mvp
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)
  IMAGE_NAME: lfneves
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: delivery-cluster
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Build with Gradle
        uses: gradle/wrapper-validation-action@v1
      - name: Execute Gradle build
        run: ./gradlew bootJar

  # docker:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #      - name: Build and push
  #        uses: docker/build-push-action@v5
  #        with:
  #          context: .
  #          push: true
  #          tags: ${{ secrets.DOCKERHUB_USERNAME }}/delivery-mvp:latest

  ecr:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run:
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .

      - name: Tag image to Amazon ECR
        id: tag-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run:
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/delivery-mvp:latest

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run:
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  eks:
    needs: ecr
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name delivery-cluster

      - name: Deploy to Kubernetes cluster
        run: kubectl apply -f k8s/application/1-deployment.yaml

      - name: Deploy to Kubernetes cluster
        run: kubectl apply -f k8s/application/2-service-load-balancer.yaml

      - name: Deploy to Kubernetes cluster
        run: kubectl apply -f k8s/application/3-hpa.yaml

      - name: Deploy to Kubernetes cluster
        run: kubectl apply -f k8s/application/4-ingress.yaml

      - name: Deploy to Kubernetes cluster
        run: kubectl apply -f k8s/postgres/3-db-configmap.yaml

      - name: Deploy to Kubernetes cluster
        run: kubectl apply -f k8s/postgres/4-db-secret.yaml

      #         uses: kodermax/kubectl-aws-eks@master
      #         env:
      #           RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
      #         with:
      #           args: set image deployment/delivery-mvp app=latest -n $KUBE_NAMESPACE

#      - name: Wait for Deployment to Finish
#        run: kubectl rollout status deployment/delivery -n delivery
